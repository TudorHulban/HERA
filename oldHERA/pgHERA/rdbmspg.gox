package pghera

import (
	"database/sql"
	"errors"
	"log"
	"strings"

	_ "github.com/lib/pq" // imported for Postgres DB
)


// InsertBulk - insert for multiple rows
func (r DBPostgresInfo) InsertBulk(pDB *sql.DB, pBulk *BulkValues) error {
	theDollarMarks := returnNoValues(pBulk.Values[0], "$", true)

	dbTransaction, err := pDB.Begin() // DB Transaction Start
	if err != nil {
		dbTransaction.Rollback()
		return err
	}
	statement := "insert into " + pBulk.TableName + "(" + pBulk.ColumnNames + ")" + " values " + theDollarMarks
	log.Println("insert bulk statement: ", statement)

	preparedStatem, err := dbTransaction.Prepare(statement)
	if err != nil {
		dbTransaction.Rollback()
		return err
	}
	defer preparedStatem.Close()

	for _, columnValues := range pBulk.Values {
		log.Println(sliceToInterface(columnValues)...)
		_, err := preparedStatem.Exec(sliceToInterface(columnValues)...)
		if err != nil {
			dbTransaction.Rollback()
			return err
		}
	}
	return dbTransaction.Commit() // DB Transaction End
}

// Query - returns data as slice of slice of interface{}
func (r DBPostgresInfo) Query(pDB *sql.DB, pSQL string) (*TableData, error) {
	tableData := new(TableData)

	rows, err := pDB.Query(pSQL)
	if err != nil {
		return nil, err
	}
	tableData, err = RowsToSlice(rows)
	if err != nil {
		return nil, err
	}
	return tableData, nil
}
